<h1>About</h1>
<p>學會建立並維護網站內容.</p>
<p>學習使用 Python 編寫 cmsimde 網際內容管理程式:</p>
<p><a href="https://www.techrepublic.com/article/python-is-eating-the-world-how-one-developers-side-project-became-the-hottest-programming-language-on-the-planet/">https://www.techrepublic.com/article/python-is-eating-the-world-how-one-developers-side-project-became-the-hottest-programming-language-on-the-planet/</a></p>
<p style="padding-left: 30px;">Windows</p>
<p style="padding-left: 30px;">Ubuntu</p>
<p style="padding-left: 30px;">Web Pages</p>
<p style="padding-left: 30px;"><a href="https://python-course.eu/books/bernd_klein_python_tutorial_a4.pdf">https://python-course.eu/books/bernd_klein_python_tutorial_a4.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/AllenDowney/ThinkPython">https://github.com/AllenDowney/ThinkPython</a></p>
<p>cmsimde based 網站功能:</p>
<p style="padding-left: 30px;">關鍵字搜尋</p>
<p style="padding-left: 30px;">簡化分頁式網站內容編輯</p>
<p style="padding-left: 30px;">內建網誌</p>
<p style="padding-left: 30px;">內建網際簡報</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxsXK5kkU1ImhJ_HcYPnTcB9MboGQcfs6FuojXRPlhInA?e=wzLQFt">basic_portable_python.7z</a> (下載 15MB, 解開後 55MB)</p>
<p>ssh to server</p>
<p>git clone --recurse-submodules <a href="mailto:git@your_ssh_session_name:github_account/cp.git">git@your_ssh_session_name:github_account/cp.git</a></p>
<p>check firewall status</p>
<p>sudo ufw status</p>
<p>sudo ufw allow 8004</p>
<p>cd cp</p>
<p>vi server.py to use 9004 as internal port</p>
<p>check if wsgi can be started throught server.py</p>
<p>hupper3 -m server.py&amp;</p>
<hr/>
<p>建立帳號</p>
<p style="padding-left: 30px;">考試帳號:</p>
<p style="padding-left: 60px;"><a href="https://exam.cycu.org">https://exam.cycu.org</a>  (線上考試帳號, 帳號為學號, 自選密碼, 請將密碼存入手機備忘錄)</p>
<p style="padding-left: 30px;">OneDrive 帳號:</p>
<p style="padding-left: 60px;">先從 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 以學號登入 (收取帳號申請確認信).</p>
<p style="padding-left: 60px;">請各學員至 <a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a>, 以 @nfu 帳號申請 OneDrive 帳號.</p>
<p style="padding-left: 60px;">計算機程式 MS Teams 代碼: plmm43c</p>
<p style="padding-left: 60px;">Given a <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> based Github Classroom repository</p>
<p style="padding-left: 90px;">localhost 維護倉儲網站內容</p>
<p style="padding-left: 90px;">s1511.cycu.org 上維護倉儲網站內容</p>
<p style="padding-left: 90px;">Replit 平台上以 Import from Github 倉儲內容後, 利用動態編輯器改版網頁內容</p>
<p style="padding-left: 30px;">Github 帳號:</p>
<p style="padding-left: 60px;">在 <a href="https://github.com/join">https://github.com/join</a> 建立帳號 (以姓名英文縮寫加上學號作為帳號, 例如: pjc41033101)</p>
<p style="padding-left: 30px;">登入 Replit:</p>
<p style="padding-left: 60px;">利用 Github 帳號登入 <a href="https://replit.com/">https://replit.com/</a></p>
<p style="padding-left: 60px;">以 Import from Github 導入要在 Replit 維護的倉儲</p>
<p style="padding-left: 30px;">登入 Ubuntu server:</p>
<p style="padding-left: 60px;"><a href="https://s1511.cycu.org">https://s1511.cycu.org</a> (demo for pj2022)</p>
<p>Python:</p>
<p style="padding-left: 30px;">近端基本的 Python 可攜程式套件:</p>
<p style="padding-left: 60px;">用於自行建立可攜程式套件 (利用舊版 Python 建立新版的 Python 可攜程式套件)</p>
<p style="padding-left: 60px;"><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxsXK5kkU1ImhJ_HcYPnTcB9MboGQcfs6FuojXRPlhInA?e=wzLQFt">basic_portable_python.7z</a> (下載 15MB, 解開後 55MB)</p>
<p style="padding-left: 60px;">SciTE 編輯器介紹</p>
<p style="padding-left: 90px;">編輯器 code.page, 何謂 <a href="https://en.wikipedia.org/wiki/Code_page">Code Page</a>?</p>
<p style="padding-left: 90px;">縮排設定, <a href="https://www.geeksforgeeks.org/indentation-in-python/">Indentation in Python</a></p>
<p style="padding-left: 90px;">載入新版本設定</p>
<p style="padding-left: 90px;">如何解譯 Python 程式</p>
<p style="padding-left: 60px;">gen_portable_python.py</p>
<p style="padding-left: 90px;"><a href="https://docs.python.org/zh-tw/3/howto/urllib2.html">https://docs.python.org/zh-tw/3/howto/urllib2.html</a></p>
<p style="padding-left: 90px;"><a href="https://docs.python.org/zh-tw/3/library/os.html">https://docs.python.org/zh-tw/3/library/os.html</a></p>
<p style="padding-left: 60px;">從官網的檔案傳輸伺服器下載 Python 基本模組的安裝檔案, 利用 Windows 內建的 msiexec.exe 解開各模組安裝檔案後, 添加可攜 Python 程式套件的啟動與關閉批次檔案, 以及基本檔案編輯器之後, 就可以透過程式方法, 利用舊版的 Python 程式套件建立新板的 Python 程式套件.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># https://docs.python.org/zh-tw/3/howto/urllib2.html
import urllib.request
# https://docs.python.org/zh-tw/3/library/os.html
import os

# basic files for Python installation
py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# Python version
version = "3.11.4"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
# location for Portable Python
path = "c:\\Python311"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, filename)
    os.system("msiexec.exe /a " + i + ".msi targetdir=" + path)
    # delete msi file
    os.remove(i + ".msi")
</pre>
<p>安裝 Python 模組可以使用 pip 工具, 但 pip.exe 會寫入安裝工具時所配置的 Python.exe 或 Pythonw.exe 路徑, 首先是如何在可攜 Python 中配置 pip</p>
<p>取得 get-pip.py 後, 以可攜 Python.exe 執行後, 就能在可攜套件中配置 pip.exe</p>
<p>Javascript:</p>
<p style="padding-left: 30px;"><a href="https://learnjavascript.online/">https://learnjavascript.online/</a> (Use the first free 7 chapters)</p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/23-free-websites-to-learn-javascript/">https://www.freecodecamp.org/news/23-free-websites-to-learn-javascript/</a></p>
<h2>計算機程式</h2>
<p>Replit 以 github mdecycu 帳號登入, 即為 Replit 系統中的 wcms 帳號.</p>
<p>先從 <a href="https://mde.tw/wcms">https://mde.tw/wcms</a> 取出有用的資料</p>
<p>準備直接在 Replit 的 wcms 帳號中開發 cmsimde 網際內容管理系統</p>
<p>cmsimde 所使用的模組:</p>
<p style="padding-left: 30px;">flask flask_cors bs4 lxml markdown pelican leo pyopenssl gevent</p>
<p style="padding-left: 30px;">利用 cmsimde 原始碼, 說明每一個模組的用法</p><h1>Networks</h1>
<p>網路設定</p>
<p>機械設計系的網路配置</p>
<p>電腦輔助設計室的網路配置</p>
<p>手機使用無線網路上網</p>
<p>筆電使用無線網路上網</p>
<p><a href="https://www.haproxy.org">https://www.haproxy.org</a> (compare with stunnel)</p><h1>Servers</h1>
<p><a href="http://wcm.cycu.org:88/github/wcm2023/content/Servers.html">http://wcm.cycu.org:88/github/wcm2023/content/Servers.html</a></p>
<p>s1511 必須在 /etc/default/stunnel4 中加入 ENABLED=1</p>
<p>sudo /etc/init.d/stunnel4 restart 可重新啟動 stunnel</p>
<p>建立 stunnel.conf</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 想要透過程式方法, 建立 stunnel.conf 設定檔案, 其中分別從 9001 到 9300, 8001 到 8300
first = '''
[https]
accept = cad2.cycu.org:
'''
second = '''
connect = 127.0.0.1:
'''
third = '''cert = /etc/letsencrypt/live/cad2.cycu.org/fullchain.pem
key = /etc/letsencrypt/live/cad2.cycu.org/privkey.pem
TIMEOUTclose = 0
'''
list8 =[str(i) for i  in range(8001, 8301)]
list9=[str(i) for i  in range(9001, 9301)]
 
setup = ""
for i in zip(list8, list9):
    #print(i)
    print(i[0], i[1])
    setup += first.strip() + i[0] + "\n" + second.strip() + i[1] + "\n" + third
 
with open("stunnel.conf", "w") as f:
    f.write(setup)</pre>
<p>假如要以自己架設的伺服器來取代 Replit, 第一步是如何在 Ubuntu 22.04 Server 上建立每位學員的帳號. 使用 <a href="https://manpages.ubuntu.com/manpages/xenial/man8/newusers.8.html">newusers</a> 指令, 配合建立一個包含帳號、密碼、uid、gid、comment、home dir 以及 shell (/bin/bash) 資料的 users.txt, 然後使用 sudo newusers users.txt 就可以完成所有學員帳號的建立. 但必須要先取得初始 uid, 也就是列出現有帳號的所屬 uid, 然後才能設定後續代號的 user id.</p>
<p>列出現有帳號 uid 的指令為: cut -d: -f1,3 /etc/passwd</p>
<p>表示要從 /etc/passwd 檔案, 以 : 符號分割檔案, 然後只取出第一與第三欄位的資料. 假如傳回:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">root:0
daemon:1
bin:2
sys:3
sync:4
games:5
man:6
lp:7
mail:8
news:9
uucp:10
proxy:13
www-data:33
backup:34
list:38
irc:39
gnats:41
nobody:65534
_apt:100
systemd-network:101
systemd-resolve:102
messagebus:103
systemd-timesync:104
pollinate:105
sshd:106
syslog:107
uuidd:108
tcpdump:109
tss:110
landscape:111
usbmux:112
tcexam:1000
lxd:999
postgres:113
tcexamdb:1001
cad2022:1002
stunnel4:998
cd1:1002
cd3:1003</pre>
<p>表示新建帳號的 uid 與 gid 就可以從 1004 開始, 然後連續增量後配給新的用戶.</p>
<p>建立各課程對應的 Ubuntu 帳號與密碼檔案:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入亂數模組
import random
# 導入字串模組
import string
# 利用 def 關鍵字定義函式
# 函式的輸入變數可以設定初始值
def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    # 函式內以多行註解說明函式功能
    """Generate random password
    """
    # 利用 return 關鍵字將所產生的亂數字串傳回
    return ''.join(random.choice(chars) for _ in range(size))
# 建立一個變數與隨後的字串對應
pass_string = "abcdefghkmnpqrstuwxyz123456789"
cp_num = ["0747", "0761"]
cad_num = ["0773", "0786"]
def gen_acc_pass(course, course_num):
    stud_list =[]
    for num in course_num:
        url = "https://nfu.cycu.org/?semester=1111&amp;courseno=" + num + "&amp;column=True"
        class_list = open(url).read().split("\n")[:-1]
        stud_list += class_list
        #print(stud_list)
    for stud_num in stud_list:
        password = password_generator(4, pass_string)
        #print(password)
        account = course + stud_num
        #print(account)
        print(stud_num + "\t" + account + "\t" + password)
gen_acc_pass("cp", cp_num)
gen_acc_pass("cad", cad_num)</pre>
<p>create_users_txt.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open("2022_fall_ubuntu_account_pass.txt") as f:
    data = f.readlines()
# newusers format:  
# pw_name:pw_passwd:pw_uid:pw_gid:pw_gecos:pw_dir:pw_shell
# uid starts from 1002
uid_starts = 1001
users = ""
send = ""
 
for i in data:
    #stud_num \t account \t password \n
    stud = i.split("\t")
    stud_num = stud[0]
    account = stud[1]
    password = stud[2].rstrip()
    uid_starts += 1
    uid = str(uid_starts)
    gid = uid
    gecos = account
    home_dir = "/home/" + account
    shell = "/bin/bash"
    #print(stud_num, account, password)
    users += account + ":" + password + ":" + uid + ":" + gid + ":" + gecos + ":" + home_dir + ":" + shell + "\n"
    send += stud_num + ":" + account + ":" + password + "\n"
 
with open("users.txt", "w", encoding="utf-8", newline='\n') as f:
        f.write(users)
 
with open("send.txt", "w", encoding="utf-8", newline='\n') as f:
        f.write(send)</pre>
<p>假如沒有採用 newline='\n', 在 Windows 寫檔案所使用的跳行符號, 以 sftp 傳到 Ubuntu 時將會因為 shell 並非 /bin/bash 而是加上 ^M$ 的錯誤 shell 資料, 導入用戶無法 login.</p>
<p>若要修正跳行符號錯誤, 可以採用:</p>
<p>change_shell.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
with open("users.txt", "r", encoding="UTF-8") as f:
    data = f.read().splitlines()
for i in data:
    account = i.split(":")[0]
    print(account)
    os.system("sudo chsh -s /bin/bash " + account)</pre>
<p>當執行上列程式時, 為避免在程式中列出管理者密碼, 可以編輯 /etc/sudoers 並加入:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># only require a password once every 60 minutes
Defaults timestamp_timeout=60</pre>
<p>可以讓 sudo python3 change_shell.py 執行時無需輸入管理者密碼.</p>
<p>當伺服器運作期程結束, 可以在 /etc/sudoers 已經納入 timeout 設定後, 利用 python3 del_users.py 刪除對應的使用者與其用戶目錄.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import subprocess
 
"""
/etc/sudoers
vi /etc/sudoers
use w! to write the read only file
add the following to sudoers
 
# only require a password once every 60 minutes
Defaults timestamp_timeout=60
 
use 
sudo python3 del_users.py
to delete users and their home directories
"""
 
with open("users.txt", "r") as f:
    data = f.read().splitlines()
#print(data)
stud_list = []
for i in data:
    stud_num = i.split(":")[0]
    #print(stud_num)
    stud_list.append(stud_num)    
for user in stud_list:
    try:
        subprocess.run(["sudo", "userdel", "-r", user], check=True)
        print(str(user) + " deleted!")
        subprocess.run(["sudo", "rm", "-rf", f"/home/{user}"], check=True)
        print(str(user) + " home deleted!")
    except subprocess.CalledProcessesError:
        print(str(user) + " is not deleted!")</pre>
<p>其中的 users.txt 就是前面用來建立用戶帳號的設定檔案.</p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
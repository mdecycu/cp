<h1>About</h1>
<p><a href="https://www.youtube.com/@lexfridman/videos">Lex Fridman - YouTube</a></p>
<p><a href="https://mde.tw/cp/mm">https://mde.tw/cp/mm</a> (<a href="https://github.com/wanglin2/mind-map">https://github.com/wanglin2/mind-map</a>)</p>
<p>設計的過程在解決問題 (Problem Solving), 而目的是在既定的時間內達成目標 (Target).</p>
<p>而工程上的解題, 通常在實作之前就必須對內容物的運作有清楚的了解 (Comprehension), 透過各種方法確認 (Verify)工程設計的結果不僅符合目標的要求 (Requirements), 而且優於現存 (Existed) 的其他方法.</p>
<p>設計內容在特定面相 (Aspects) 優於現存的其他方法, 所完成的產品才有機會在市場上取得一席之地.</p>
<p>目標:</p>
<p style="padding-left: 30px;">找到方法建立網站 (網站的功能為何?)</p>
<p style="padding-left: 60px;"><a href="https://heptabase.com/">https://heptabase.com/</a></p>
<p style="padding-left: 90px;"><a href="https://sunrisemedium.com/p/120/heptabase-joins-y-combinator">https://sunrisemedium.com/p/120/heptabase-joins-y-combinator</a></p>
<p style="padding-left: 30px;">透過工程實習了解特定主題與可用工具</p>
<p style="padding-left: 30px;">擁有 AI 工具之後, 該如何進行機械 (電) 設計實習?</p>
<p style="padding-left: 60px;">沒有電 (電腦、電路、電子元件) 的機械設計, 會是甚麼樣貌?</p>
<p>Online compiler:</p>
<p style="padding-left: 30px;"><a href="https://onecompiler.com/">https://onecompiler.com/</a></p>
<p style="padding-left: 60px;"><a href="https://onecompiler.com/about">https://onecompiler.com/about</a></p>
<p style="padding-left: 60px;"><a href="https://onecompiler.com/tutorials">https://onecompiler.com/tutorials</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/">https://www.programiz.com/</a></p>
<p style="padding-left: 30px;"><a href="https://www.onlinegdb.com/">https://www.onlinegdb.com/</a></p>
<p style="padding-left: 30px;"><a href="https://code.visualstudio.com/docs/python/python-web">https://code.visualstudio.com/docs/python/python-web</a></p>
<p>學會建立並維護網站內容.</p>
<p>學習使用 Python 編寫 cmsimde 網際內容管理程式:</p>
<p><a href="https://www.techrepublic.com/article/python-is-eating-the-world-how-one-developers-side-project-became-the-hottest-programming-language-on-the-planet/">https://www.techrepublic.com/article/python-is-eating-the-world-how-one-developers-side-project-became-the-hottest-programming-language-on-the-planet/</a></p>
<p style="padding-left: 30px;">Windows</p>
<p style="padding-left: 30px;">Ubuntu</p>
<p style="padding-left: 30px;">Web Pages</p>
<p style="padding-left: 30px;"><a href="https://python-course.eu/books/bernd_klein_python_tutorial_a4.pdf">https://python-course.eu/books/bernd_klein_python_tutorial_a4.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/AllenDowney/ThinkPython">https://github.com/AllenDowney/ThinkPython</a></p>
<p>cmsimde based 網站功能:</p>
<p style="padding-left: 30px;">關鍵字搜尋</p>
<p style="padding-left: 30px;">簡化分頁式網站內容編輯</p>
<p style="padding-left: 30px;">內建網誌</p>
<p style="padding-left: 30px;">內建網際簡報</p>
<p><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxsXK5kkU1ImhJ_HcYPnTcB9MboGQcfs6FuojXRPlhInA?e=wzLQFt">basic_portable_python.7z</a> (下載 15MB, 解開後 55MB)</p>
<p>ssh to server</p>
<p>git clone --recurse-submodules <a href="mailto:git@your_ssh_session_name:github_account/cp.git">git@your_ssh_session_name:github_account/cp.git</a></p>
<p>check firewall status</p>
<p>sudo ufw status</p>
<p>sudo ufw allow 8004</p>
<p>cd cp</p>
<p>vi server.py to use 9004 as internal port</p>
<p>check if wsgi can be started throught server.py</p>
<p>hupper3 -m server.py&amp;</p>
<hr/>
<p>建立帳號</p>
<p style="padding-left: 30px;">考試帳號:</p>
<p style="padding-left: 60px;"><a href="https://exam.cycu.org">https://exam.cycu.org</a>  (線上考試帳號, 帳號為學號, 自選密碼, 請將密碼存入手機備忘錄)</p>
<p style="padding-left: 30px;">OneDrive 帳號:</p>
<p style="padding-left: 60px;">先從 <a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a> 以學號登入 (收取帳號申請確認信).</p>
<p style="padding-left: 60px;">請各學員至 <a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a>, 以 @nfu 帳號申請 OneDrive 帳號.</p>
<p style="padding-left: 60px;">計算機程式 MS Teams 代碼: plmm43c</p>
<p style="padding-left: 60px;">Given a <a href="https://github.com/mdecycu/cmsite">https://github.com/mdecycu/cmsite</a> based Github Classroom repository</p>
<p style="padding-left: 90px;">localhost 維護倉儲網站內容</p>
<p style="padding-left: 90px;">s1511.cycu.org 上維護倉儲網站內容</p>
<p style="padding-left: 90px;">Replit 平台上以 Import from Github 倉儲內容後, 利用動態編輯器改版網頁內容</p>
<p style="padding-left: 30px;">Github 帳號:</p>
<p style="padding-left: 60px;">在 <a href="https://github.com/join">https://github.com/join</a> 建立帳號 (以姓名英文縮寫加上學號作為帳號, 例如: pjc41033101)</p>
<p style="padding-left: 30px;">登入 Replit:</p>
<p style="padding-left: 60px;">利用 Github 帳號登入 <a href="https://replit.com/">https://replit.com/</a></p>
<p style="padding-left: 60px;">以 Import from Github 導入要在 Replit 維護的倉儲</p>
<p style="padding-left: 30px;">登入 Ubuntu server:</p>
<p style="padding-left: 60px;"><a href="https://s1511.cycu.org">https://s1511.cycu.org</a> (demo for pj2022)</p>
<p>Python:</p>
<p style="padding-left: 30px;">近端基本的 Python 可攜程式套件:</p>
<p style="padding-left: 60px;">用於自行建立可攜程式套件 (利用舊版 Python 建立新版的 Python 可攜程式套件)</p>
<p style="padding-left: 60px;"><a href="https://nfuedu-my.sharepoint.com/:u:/g/personal/yen_nfu_edu_tw/EbxsXK5kkU1ImhJ_HcYPnTcB9MboGQcfs6FuojXRPlhInA?e=wzLQFt">basic_portable_python.7z</a> (下載 15MB, 解開後 55MB)</p>
<p style="padding-left: 60px;">SciTE 編輯器介紹</p>
<p style="padding-left: 90px;">編輯器 code.page, 何謂 <a href="https://en.wikipedia.org/wiki/Code_page">Code Page</a>?</p>
<p style="padding-left: 90px;">縮排設定, <a href="https://www.geeksforgeeks.org/indentation-in-python/">Indentation in Python</a></p>
<p style="padding-left: 90px;">載入新版本設定</p>
<p style="padding-left: 90px;">如何解譯 Python 程式</p>
<p style="padding-left: 60px;">gen_portable_python.py</p>
<p style="padding-left: 90px;"><a href="https://docs.python.org/zh-tw/3/howto/urllib2.html">https://docs.python.org/zh-tw/3/howto/urllib2.html</a></p>
<p style="padding-left: 90px;"><a href="https://docs.python.org/zh-tw/3/library/os.html">https://docs.python.org/zh-tw/3/library/os.html</a></p>
<p style="padding-left: 60px;">從官網的檔案傳輸伺服器下載 Python 基本模組的安裝檔案, 利用 Windows 內建的 msiexec.exe 解開各模組安裝檔案後, 添加可攜 Python 程式套件的啟動與關閉批次檔案, 以及基本檔案編輯器之後, 就可以透過程式方法, 利用舊版的 Python 程式套件建立新板的 Python 程式套件.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># https://docs.python.org/zh-tw/3/howto/urllib2.html
import urllib.request
# https://docs.python.org/zh-tw/3/library/os.html
import os

# basic files for Python installation
py_list = ["core", "dev", "exe", "lib", "tcltk", "tools"]
# Python version
version = "3.11.4"
# Python msi download URL
ftp = "https://www.python.org/ftp/python/" + version + "/amd64/"
# location for Portable Python
path = "c:\\Python311"
# create directory
try:
    os.mkdir(path)
except:
    # path exists
    pass
# get Python installation msi files and extract into target dir
for i in py_list:
    filename = i + ".msi"
    url = ftp + filename
    # download basic python msi file
    urllib.request.urlretrieve(url, filename)
    os.system("msiexec.exe /a " + i + ".msi targetdir=" + path)
    # delete msi file
    os.remove(i + ".msi")
</pre>
<p>安裝 Python 模組可以使用 pip 工具, 但 pip.exe 會寫入安裝工具時所配置的 Python.exe 或 Pythonw.exe 路徑, 首先是如何在可攜 Python 中配置 pip</p>
<p>取得 get-pip.py 後, 以可攜 Python.exe 執行後, 就能在可攜套件中配置 pip.exe</p>
<p>Javascript:</p>
<p style="padding-left: 30px;"><a href="https://learnjavascript.online/">https://learnjavascript.online/</a> (Use the first free 7 chapters)</p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/23-free-websites-to-learn-javascript/">https://www.freecodecamp.org/news/23-free-websites-to-learn-javascript/</a></p><h2>計算機程式</h2>
<p><a href="https://en.wikipedia.org/wiki/Declarative_programming">https://en.wikipedia.org/wiki/Declarative_programming</a> (宣告式程式設計)</p>
<p>and</p>
<p><a href="https://en.wikipedia.org/wiki/Imperative_programming">https://en.wikipedia.org/wiki/Imperative_programming</a> (指令式程式設計)</p>
<p style="padding-left: 30px;"><a href="https://github.com/rjdscott/PyFP">https://github.com/rjdscott/PyFP</a></p>
<p style="padding-left: 30px;"><a href="https://kachayev.github.io/talks/uapycon2012/">https://kachayev.github.io/talks/uapycon2012/</a></p>
<p style="padding-left: 30px;"><a href="https://youtu.be/o9pEzgHorH0">Stop writing classes</a></p>
<p style="padding-left: 30px;"><a href="https://speakerdeck.com/radix/purely-functional-programming-in-python-pure-fun">https://speakerdeck.com/radix/purely-functional-programming-in-python-pure-fun</a></p>
<p style="padding-left: 30px;"><a href="https://youtu.be/x7sQVLO3JJA">Write functional codes in Python</a></p>
<p><a href="https://book.realworldhaskell.org/read/">https://book.realworldhaskell.org/read/</a></p>
<p><a href="https://youtu.be/re96UgMk6GQ">The Haskell journey</a></p>
<p><a href="http://learnyouahaskell.com/chapters">http://learnyouahaskell.com/chapters</a></p>
<p><br/>Functions as first-class citizens<br/>lambda<br/>Standard library: map/filter/reduce, itertools, operator<br/>Generators can be used for lazy-evaluation (in some cases)</p>
<p>Beginning Functional Javascript</p>
<p><a href="https://docs.python.org/3/library/functions.html#classmethod">Python classmethod</a></p>
<p><a href="https://docs.python.org/3/library/functions.html#staticmethod">Python staticmethod</a></p>
<p><a href="https://skeoop.github.io/unittesting/PythonUnitTesting.pdf">Python unit testing</a></p>
<p><a href="https://realpython.com/python-testing/">Python testing</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B">鴨子型別</a></p>
<p><a href="https://en.wikipedia.org/wiki/Factory_method_pattern">工廠模式</a></p>
<p><a href="https://quescol.com/interview-preparation/pattern-programming-in-python">https://quescol.com/interview-preparation/pattern-programming-in-python</a></p>
<p><a href="/downloads/Python_coding_q_and_a.txt">Python_coding_q_and_a.txt</a></p>
<p><a href="https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md">https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/README.md</a></p>
<p>Replit 以 github mdecycu 帳號登入, 即為 Replit 系統中的 wcms 帳號.</p>
<p>先從 <a href="https://mde.tw/wcms">https://mde.tw/wcms</a> 取出有用的資料</p>
<p>準備直接在 Replit 的 wcms 帳號中開發 cmsimde 網際內容管理系統</p>
<p>cmsimde 所使用的模組:</p>
<p style="padding-left: 30px;">flask flask_cors bs4 lxml markdown pelican leo pyopenssl gevent</p>
<p style="padding-left: 30px;">利用 cmsimde 原始碼, 說明每一個模組的用法</p>
<p>cmsimde 的後續開發, 利用 class 物件導向進行開發</p>
<p>納入 template 架構</p>
<p>針對所使用的技術, 逐步更新</p>
<p></p>
<p>一般大學的計算機程式課程通常包括以下內容：</p>
<p>1. 認識程式設計：介紹程式設計的基本概念、原則和方法，培養學生的邏輯思維和解決問題的能力。</p>
<p>2. 程式語言：教授一種或多種程式語言，如C、Java、Python等，讓學生學習程式語言的語法、結構和用法。</p>
<p>3. 資料結構：介紹常見的資料結構，如陣列、鏈表、堆疊、佇列、樹和圖等，並學習如何選擇和應用不同的資料結構解決問題。</p>
<p>4. 演算法：學習常見的演算法設計和分析方法，如排序、搜尋、圖算法等，培養學生的演算思維和效能優化能力。</p>
<p>5. 軟體工程：介紹軟體開發的基本流程和方法，包括需求分析、設計、編碼、測試和維護等，培養學生的團隊合作和專案管理能力。</p>
<p>6. 資料庫：學習資料庫的基本概念和操作，包括資料庫設計、SQL查詢語言、資料庫管理系統等。</p>
<p>7. 網路和網頁開發：介紹網路的基本原理和協議，以及網頁開發的相關技術，如HTML、CSS、JavaScript等。</p>
<p>8. 軟體安全：學習軟體安全的基本概念和方法，包括身份驗證、加密、防火牆等，培養學生的資訊安全意識和技能。</p>
<h2>Haskell</h2>
<p><a href="https://youtu.be/bB4fmQiUYPw">Install Haskell on Windows</a></p>
<p>Bring up the powershell not necessary as administrator</p>
<p>setup proxy for powershell</p>
<p><code>netsh winhttp set proxy "192.168.0.14:3128"</code></p>
<p><code>netsh winhttp set proxy "[2001:288:6004:17::4]:3128"</code></p>
<p><code>execute the following command to install ghcup, ghc, msys2, cabal, stack and hls</code></p>
<pre class="brush:ps;auto-links:false;toolbar:false" contenteditable="false">Set-ExecutionPolicy Bypass -Scope Process -Force;[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; try { Invoke-Command -ScriptBlock ([ScriptBlock]::Create((Invoke-WebRequest https://www.haskell.org/ghcup/sh/bootstrap-haskell.ps1 -UseBasicParsing))) -ArgumentList $true } catch { Write-Error $_ }</pre>
<p>Welcome to Haskell!<br/><br/>This script can download and install the following programs:<br/>  * ghcup - The Haskell toolchain installer<br/>  * ghc   - The Glasgow Haskell Compiler<br/>  * msys2 - A linux-style toolchain environment required for many operations<br/>  * cabal - The Cabal build tool for managing Haskell software<br/>  * stack - (optional) A cross-platform program for developing Haskell projects<br/>  * hls   - (optional) A language server for developers to integrate with their editor/IDE<br/><br/>Please note that ANTIVIRUS may interfere with the installation. If you experience problems, consider<br/>disabling it temporarily.<br/><br/>Where to install to (this should be a short Path, preferably a Drive like 'C:\')?<br/>If you accept this path, binaries will be installed into 'C:\ghcup\bin' and msys2 into 'C:\ghcup\msys64'.<br/>Press enter to accept the default [C:\]:</p>
<p><br/>Setting env variable GHCUP_INSTALL_BASE_PREFIX to 'C:\'<br/>Preparing for GHCup installation...<br/>Specify Cabal directory (this is where haskell packages end up)<br/>Press enter to accept the default [C:\\cabal]:</p>
<p></p>
<p>In a new powershell or cmd.exe session, now you can...<br/><br/>Start a simple repl via:<br/>  ghci<br/><br/>Start a new haskell project in the current directory via:<br/>  cabal init --interactive<br/><br/>Install other GHC versions and tools via:<br/>  ghcup list<br/>  ghcup install &lt;tool&gt; &lt;version&gt;<br/><br/>To install system libraries and update msys2/mingw64,<br/>open the "Mingw haskell shell"<br/>and the "Mingw package management docs"<br/>desktop shortcuts.<br/><br/>If you are new to Haskell, check out <a href="https://www.haskell.org/ghcup/steps/">https://www.haskell.org/ghcup/steps/</a></p>
<p>path add the "ghcup\bin"</p>
<p>ghc --version</p>
<p><a href="https://www.haskell.org/ghcup/steps/">https://www.haskell.org/ghcup/steps/</a></p>
<p><a href="https://github.com/lambdacms/lambdacms">https://github.com/lambdacms/lambdacms</a></p>
<p><a href="https://github.com/NorfairKing/smos">https://github.com/NorfairKing/smos</a></p>
<p><a href="https://github.com/garybgenett/composer">https://github.com/garybgenett/composer</a></p>
<p><a href="https://github.com/uhub/awesome-haskell">https://github.com/uhub/awesome-haskell</a></p>
<h2>Lambda</h2>
<p><a href="https://www.freecodecamp.org/news/python-lambda-function-explained/">https://www.freecodecamp.org/news/python-lambda-function-explained/</a></p>
<p>沒有名稱的函式</p>
<p>能寫成一行的函式</p>
<p>只使用一次的函式</p>
<p>lambda argument(s) : expression</p>
<p>lambda 為關鍵字, 用來定義無名函式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">(lambda x : x * 2)(3)</pre>
<p>An iterable is essentially anything that consists of a series of values, such as characters, numbers, and so on.<br/><br/>In Python, iterables include strings, lists, dictionaries, ranges, tuples, and so on. When working with iterables, you can use lambda functions in conjunction with two common functions: filter() and map().<br/>Filter()<br/><br/>When you want to focus on specific values in an iterable, you can use the filter function. The following is the syntax of a filter function:<br/><br/>filter(function, iterable)</p>
<h2>RoboDK</h2>
<p><a href="https://link.springer.com/book/10.1007/978-3-031-06469-2">2023 Robotics, Vision and Control</a></p>
<p><a href="https://github.com/gpjt/webgl-lessons">https://github.com/gpjt/webgl-lessons</a></p>
<p><a href="https://github.com/petercorke/RVC3-python">https://github.com/petercorke/RVC3-python</a></p>
<p><a href="https://github.com/mdecycu/WebGL-Robot">https://github.com/mdecycu/WebGL-Robot</a>  (compared with <a href="/downloads/pick_and_place_robodk_web.txt">pick_and_place_robodk_web.txt</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/toji/gl-matrix">https://github.com/toji/gl-matrix</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/AlmondFlour/WebGL-Robot/blob/master/webgl-utils.js">https://github.com/AlmondFlour/WebGL-Robot/blob/master/webgl-utils.js</a></p>
<p><a href="/downloads/cube_webgl_show_html.7z">cube_webgl_show_html.7z</a></p>
<p><a href="/downloads/cube_webgl_rotate_html.7z">cube_webgl_rotate_html.7z</a></p>
<p><a href="/downloads/cube_webgl_rotate_zoom_html.7z">cube_webgl_rotate_zoom_html.7z</a></p>
<p><a href="https://robodk.com/downloads/Install-RoboDK-64-v5.6.2.exe">Download 5.6.2</a> (5.4.0 之後 Python API 的用法已經大幅更動)</p>
<p><a href="https://robodk.com/downloads-v/Install-RoboDK-64-v5.2.2.exe">Download 5.2.2</a></p>
<p>使用 RoboDK 5.2.2</p>
<p>robolink - Python API for RoboDK</p>
<p>robodk.py - Matrix class for robotics</p>
<p><a href="https://docs.python.org/3.9/library/collections.abc.html#module-collections.abc">https://docs.python.org/3.9/library/collections.abc.html#module-collections.abc</a></p>
<p>robodk522_portable\examples\ABB-IRB-4600-20-2.50_draw 中的 svg.py 與 path.py 使用 Python 3.11.4 執行必須因應修改:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># for Python &lt; 3.9
# from collections import MutableSequence
# for Python &gt;= 3.9
from collections.abc import MutableSequence</pre>
<p>Before 5.4.0<br/><br/>Most of our examples used the import method below:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robolink import *
from robodk import *
RDK = Robolink()
pose = eye()
ITEM_TYPE_ROBOT</pre>
<p>After 5.4.0<br/><br/>You can use any of the following import methods:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robodk import robolink, robomath
RDK = robolink.Robolink()
pose = robomath.eye()
robolink.ITEM_TYPE_ROBOT</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robodk.robolink import Robolink, ITEM_TYPE_ROBOT
from robodk.robomath import eye
RDK = Robolink()
pose = eye()
ITEM_TYPE_ROBOT</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from robodk.robolink import *
from robodk.robomath import *
RDK = Robolink()
pose = eye()
ITEM_TYPE_ROBOT</pre>
<p>The robodk package is the distributed entry point of the Python API. It is the common parent of all sub-packages and modules that constitute the Python API.<br/><br/>Overview of the RoboDK API:<br/><br/>        <a href="https://robodk.com/doc/en/RoboDK-API.html">https://robodk.com/doc/en/RoboDK-API.html</a></p>
<p></p>
<p>參考資料: <a href="https://robodk.com/doc/en/PythonAPI/robodk.html">https://robodk.com/doc/en/PythonAPI/robodk.html</a></p>
<h2>Networks</h2>
<p>網路設定</p>
<p>機械設計系的網路配置</p>
<p>電腦輔助設計室的網路配置</p>
<p>手機使用無線網路上網</p>
<p>筆電使用無線網路上網</p>
<p><a href="https://www.haproxy.org">https://www.haproxy.org</a> (compare with stunnel)</p>
<h2>Replit_env</h2>
<p><a href="https://docs.replit.com/">https://docs.replit.com/</a> </p>
<p>GIT_AUTHOR_NAME</p>
<p>GIT_AUTHOR_EMAIL</p>
<p>Convert 之後利用 Git Tool 執行 git commit -m and git push</p>
<p>cmsimde on Replit:</p>
<p>由於一般 server 下 config/config 並不會 go public, 但在 Replit 就如同 Public Github Repository, 任何人都可以 fork 並檢視所有倉儲中的檔案. 因此除非在個人控管的 server 中運作, 若在 Replit 則必須將希望內定為 config/config 中的 string 搬遷到 Replit 中 secrets tab 的 "config" key 對應的 value.</p>
<p>另外 cmsimde 中有關 python execute bash 的 acp 程式碼也必須進一步修改.</p><h2>Servers</h2>
<p>未能來電啟動的 servers:</p>
<p>10_16_16::4, 5, 9, 11, 13, 15</p>
<p>0811:2:0:cd02, 0811:2:0:cd02, db73::1</p>
<p><a href="https://youtu.be/1UX1-BJD3Tk">https://youtu.be/1UX1-BJD3Tk</a> (黃敬群 keynote)</p>
<p><a href="https://youtu.be/FLnzxRMxo_w">https://youtu.be/FLnzxRMxo_w</a> (Dcard keynote)</p>
<p><a href="https://youtu.be/VqOa35-1Y4A">https://youtu.be/VqOa35-1Y4A</a> (台灣資訊教育探討)</p>
<p>administrator start cmd</p>
<p>net user /add username *</p>
<p>key in password for new username</p>
<p><a href="http://wcm.cycu.org:88/github/wcm2023/content/Servers.html">http://wcm.cycu.org:88/github/wcm2023/content/Servers.html</a></p>
<p>s1511 必須在 /etc/default/stunnel4 中加入 ENABLED=1</p>
<p>sudo /etc/init.d/stunnel4 restart 可重新啟動 stunnel</p>
<p>建立 stunnel.conf</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 想要透過程式方法, 建立 stunnel.conf 設定檔案, 其中分別從 9001 到 9300, 8001 到 8300
first = '''
[https]
accept = cad2.cycu.org:
'''
second = '''
connect = 127.0.0.1:
'''
third = '''cert = /etc/letsencrypt/live/cad2.cycu.org/fullchain.pem
key = /etc/letsencrypt/live/cad2.cycu.org/privkey.pem
TIMEOUTclose = 0
'''
list8 =[str(i) for i  in range(8001, 8301)]
list9=[str(i) for i  in range(9001, 9301)]
 
setup = ""
for i in zip(list8, list9):
    #print(i)
    print(i[0], i[1])
    setup += first.strip() + i[0] + "\n" + second.strip() + i[1] + "\n" + third
 
with open("stunnel.conf", "w") as f:
    f.write(setup)</pre>
<p>假如要以自己架設的伺服器來取代 Replit, 第一步是如何在 Ubuntu 22.04 Server 上建立每位學員的帳號. 使用 <a href="https://manpages.ubuntu.com/manpages/xenial/man8/newusers.8.html">newusers</a> 指令, 配合建立一個包含帳號、密碼、uid、gid、comment、home dir 以及 shell (/bin/bash) 資料的 users.txt, 然後使用 sudo newusers users.txt 就可以完成所有學員帳號的建立. 但必須要先取得初始 uid, 也就是列出現有帳號的所屬 uid, 然後才能設定後續代號的 user id.</p>
<p>列出現有帳號 uid 的指令為: cut -d: -f1,3 /etc/passwd</p>
<p>表示要從 /etc/passwd 檔案, 以 : 符號分割檔案, 然後只取出第一與第三欄位的資料. 假如傳回:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">root:0
daemon:1
bin:2
sys:3
sync:4
games:5
man:6
lp:7
mail:8
news:9
uucp:10
proxy:13
www-data:33
backup:34
list:38
irc:39
gnats:41
nobody:65534
_apt:100
systemd-network:101
systemd-resolve:102
messagebus:103
systemd-timesync:104
pollinate:105
sshd:106
syslog:107
uuidd:108
tcpdump:109
tss:110
landscape:111
usbmux:112
tcexam:1000
lxd:999
postgres:113
tcexamdb:1001
cad2022:1002
stunnel4:998
cd1:1002
cd3:1003</pre>
<p>表示新建帳號的 uid 與 gid 就可以從 1004 開始, 然後連續增量後配給新的用戶.</p>
<p>建立各課程對應的 Ubuntu 帳號與密碼檔案:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入亂數模組
import random
# 導入字串模組
import string
# 利用 def 關鍵字定義函式
# 函式的輸入變數可以設定初始值
def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    # 函式內以多行註解說明函式功能
    """Generate random password
    """
    # 利用 return 關鍵字將所產生的亂數字串傳回
    return ''.join(random.choice(chars) for _ in range(size))
# 建立一個變數與隨後的字串對應
pass_string = "abcdefghkmnpqrstuwxyz123456789"
cp_num = ["0747", "0761"]
cad_num = ["0773", "0786"]
def gen_acc_pass(course, course_num):
    stud_list =[]
    for num in course_num:
        url = "https://nfu.cycu.org/?semester=1111&amp;courseno=" + num + "&amp;column=True"
        class_list = open(url).read().split("\n")[:-1]
        stud_list += class_list
        #print(stud_list)
    for stud_num in stud_list:
        password = password_generator(4, pass_string)
        #print(password)
        account = course + stud_num
        #print(account)
        print(stud_num + "\t" + account + "\t" + password)
gen_acc_pass("cp", cp_num)
gen_acc_pass("cad", cad_num)</pre>
<p>create_users_txt.py:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">with open("2022_fall_ubuntu_account_pass.txt") as f:
    data = f.readlines()
# newusers format:  
# pw_name:pw_passwd:pw_uid:pw_gid:pw_gecos:pw_dir:pw_shell
# uid starts from 1002
uid_starts = 1001
users = ""
send = ""
 
for i in data:
    #stud_num \t account \t password \n
    stud = i.split("\t")
    stud_num = stud[0]
    account = stud[1]
    password = stud[2].rstrip()
    uid_starts += 1
    uid = str(uid_starts)
    gid = uid
    gecos = account
    home_dir = "/home/" + account
    shell = "/bin/bash"
    #print(stud_num, account, password)
    users += account + ":" + password + ":" + uid + ":" + gid + ":" + gecos + ":" + home_dir + ":" + shell + "\n"
    send += stud_num + ":" + account + ":" + password + "\n"
 
with open("users.txt", "w", encoding="utf-8", newline='\n') as f:
        f.write(users)
 
with open("send.txt", "w", encoding="utf-8", newline='\n') as f:
        f.write(send)</pre>
<p>假如沒有採用 newline='\n', 在 Windows 寫檔案所使用的跳行符號, 以 sftp 傳到 Ubuntu 時將會因為 shell 並非 /bin/bash 而是加上 ^M$ 的錯誤 shell 資料, 導入用戶無法 login.</p>
<p>若要修正跳行符號錯誤, 可以採用:</p>
<p>change_shell.py</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
with open("users.txt", "r", encoding="UTF-8") as f:
    data = f.read().splitlines()
for i in data:
    account = i.split(":")[0]
    print(account)
    os.system("sudo chsh -s /bin/bash " + account)</pre>
<p>當執行上列程式時, 為避免在程式中列出管理者密碼, 可以編輯 /etc/sudoers 並加入:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false"># only require a password once every 60 minutes
Defaults timestamp_timeout=60</pre>
<p>可以讓 sudo python3 change_shell.py 執行時無需輸入管理者密碼.</p>
<p>當伺服器運作期程結束, 可以在 /etc/sudoers 已經納入 timeout 設定後, 利用 python3 del_users.py 刪除對應的使用者與其用戶目錄.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import subprocess
 
"""
/etc/sudoers
vi /etc/sudoers
use w! to write the read only file
add the following to sudoers
 
# only require a password once every 60 minutes
Defaults timestamp_timeout=60
 
use 
sudo python3 del_users.py
to delete users and their home directories
"""
 
with open("users.txt", "r") as f:
    data = f.read().splitlines()
#print(data)
stud_list = []
for i in data:
    stud_num = i.split(":")[0]
    #print(stud_num)
    stud_list.append(stud_num)    
for user in stud_list:
    try:
        subprocess.run(["sudo", "userdel", "-r", user], check=True)
        print(str(user) + " deleted!")
        subprocess.run(["sudo", "rm", "-rf", f"/home/{user}"], check=True)
        print(str(user) + " home deleted!")
    except subprocess.CalledProcessesError:
        print(str(user) + " is not deleted!")</pre>
<p>其中的 users.txt 就是前面用來建立用戶帳號的設定檔案.</p>
<h2>Blender</h2>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-7954-0">Introducing to Blender 3.0</a></p>
<h2>Mojo</h2>
<p>🔥 = mojo</p>
<p>50703199 starts <a href="https://docs.modular.com/mojo/">https://docs.modular.com/mojo/</a></p>
<p style="padding-left: 30px;"><a href="https://playground.modular.com/hub/login">https://playground.modular.com/hub/login</a></p>
<p><a href="https://youtu.be/-3Kf2ZZU-dg">https://youtu.be/-3Kf2ZZU-dg</a> (Modular Product Launch 2023 Keynote)</p>
<p><a href="https://github.com/modularml/mojo">https://github.com/modularml/mojo</a></p>
<p><a href="https://docs.modular.com/mojo/programming-manual.html">https://docs.modular.com/mojo/programming-manual.html</a></p>
<p>創造 Mojo 新程式語言的緣由: <a href="https://docs.modular.com/mojo/why-mojo.html">https://docs.modular.com/mojo/why-mojo.html</a></p>
<p>Mojo roadmap: <a href="https://docs.modular.com/mojo/roadmap.html">https://docs.modular.com/mojo/roadmap.html</a></p>
<p>Mojo 為編譯程式語言, 因此需要 main() function:</p>
<pre class="brush:mojo;auto-links:false;toolbar:false" contenteditable="false">fn main():
    var x: Int = 1
    x += 1
    print(x)</pre>
<p>syntaxhilighter 必須從 static/syntaxhilighter/shBrushPython.js 修改後, 納入 Mojo 程式語言的關鍵字後, 再設定</p>
<p>\static\tinymce4\tinymce\plugins\sh4tinymce\plugin.js 與 plugin.min.js 檔案後納入 Mojo 程式語言的高亮顯示.</p><h2>AI</h2>
<p><a href="https://labs.perplexity.ai/">https://labs.perplexity.ai/</a> <br/><br/></p>
<h1>Projects</h1>
<p>1. 認識數位環境與資源</p>
<p style="padding-left: 30px;">企業所提供的數位資源:</p>
<p style="padding-left: 60px;"><a href="https://chat.openai.com/">ChatGPT</a></p>
<p style="padding-left: 60px;"><a href="https://www.autodesk.com/education/edu-software/overview">AutoDesk</a></p>
<p style="padding-left: 60px;"><a href="https://resources.sw.siemens.com/zh-TW/download-solid-edge-student-edition">Siemens Solid Edge</a></p>
<p style="padding-left: 90px;"><a href="https://www.sw.siemens.com/en-US/academic/engineering-student-resources/engineering-student-software/">Engineering Student Softwares</a></p>
<p style="padding-left: 60px;"><a href="https://www.ptc.com/en/products/education/free-software/creo-college-download">PTC Creo</a></p>
<p style="padding-left: 90px;"><a href="https://www.onshape.com/en/education/">Onshape for Education</a></p>
<p style="padding-left: 60px;"><a href="https://www.ansys.com/academic/students">Ansys</a></p>
<p style="padding-left: 60px;"><a href="https://www.microsoft.com/en-us/education/products/office">Office 365 for Education</a></p>
<p style="padding-left: 30px;">學校所提供的數位資源</p>
<p style="padding-left: 60px;">軟體 <span>(</span><span>使用校園網路或 VPN 下載)</span></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Windows/tw/Win_10_22H2.4_64BIT_Ch.ISO">Windows 10 64位元 22H2.4</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Windows/tw/Win_11_22H2.6_64BIT_Ch.ISO">Windows 11 64位元 22H2.6</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/KMS/windows_kms.bat">windows_kms.bat</a></p>
<p style="padding-left: 90px;"><span><a href="https://software.nfu.edu.tw/Office/tw/Office_Pro_2019_64Ch.iso">Office 2019 64位元</a></span></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/KMS/Office_2019_KMS.bat">office_2019_kms.bat</a></p>
<p style="padding-left: 90px;"><span><a href="https://software.nfu.edu.tw/Office/tw/Office_Pro_Plus_2016_64Ch.iso">Office 2016 64位元</a></span></p>
<p style="padding-left: 120px;"><span><a href="https://software.nfu.edu.tw/KMS/Office_2016_KMS.bat">office_2016_kms.bat</a></span></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/Developer/Visual%20Studio/en/Visual_Studio_Pro_2015.zip">Visual Studio Pro 2015 英文版</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/MATLAB/R2023a_windows.zip">MATLAB for Windows 2023a 64位元</a></p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3189-0">Introduction to MATLAB for Engineers and Scientists</a></p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-1-4612-1754-1">Introduction to Partial Differential Equations with MATLAB</a></p>
<p style="padding-left: 90px;"><a href="https://software.nfu.edu.tw/MATLAB/R2022alinux.zip">MATLAB for Linux 2022a 64位元</a></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/files/matlab_Final.pdf">MATLAB 安裝說明</a></p>
<p style="padding-left: 120px;"><a href="https://software.nfu.edu.tw/files/matlab_ENG_final.pdf">MATLAB Guideline</a></p>
<p style="padding-left: 60px;">電子資源</p>
<p style="padding-left: 90px;">數位學習網: <a href="https://www.nfu.edu.tw/zh/elearning">https://www.nfu.edu.tw/zh/elearning</a> </p>
<p style="padding-left: 90px;">eBooks and Journals: <a href="https://link.springer.com">https://link.springer.com</a> </p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/books/i/65">Introducing eBooks</a></p>
<p style="padding-left: 30px;">綜合工程第一館網路配置</p>
<p style="padding-left: 60px;">機械設計工程系</p>
<p style="padding-left: 90px;">IPv4 網段 (140.130.17.0/24)</p>
<p style="padding-left: 120px;">Gateway: 140.130.17.254</p>
<p style="padding-left: 120px;">DNS: 140.130.17.3</p>
<p style="padding-left: 90px;">IPv6 網段 (2001:288:6004:17::/32)</p>
<p style="padding-left: 120px;">Gateway: 2001:288:6004:17::254</p>
<p style="padding-left: 120px;">DNS: 2001:288:6004:17::3</p>
<p style="padding-left: 60px;">有線網路</p>
<p style="padding-left: 60px;">無線網路</p>
<p style="padding-left: 30px;">綜一館電腦資源</p>
<p style="padding-left: 60px;">可借用電腦教室</p>
<p style="padding-left: 90px;">磁區設定與所安裝軟體</p>
<p style="padding-left: 60px;">工作站中的伺服器</p>
<p style="padding-left: 90px;"><a href="https://s1511.cycu.org">https://s1511.cycu.org</a> </p>
<p style="padding-left: 120px;"><a href="https://link.springer.com/book/10.1007/978-0-230-80245-2">Introducing UNIX and Linux</a></p>
<p style="padding-left: 30px;">電腦輔助設計室</p>
<p style="padding-left: 60px;">兩種不同規格的電腦</p>
<p style="padding-left: 30px;">協同產品設計室</p>
<p style="padding-left: 60px;">虛實手足球系統</p>
<p style="padding-left: 90px;">Arduino</p>
<p style="padding-left: 90px;">CoppeliaSim</p>
<p style="padding-left: 90px;">RoboDK</p>
<p style="padding-left: 60px;">手足球檯</p>
<p style="padding-left: 90px;">Rasperry Pi</p>
<p style="padding-left: 90px;">Webcam</p>
<p>2. 工程師的計算機程式能力</p>
<p>3. 解決問題</p>
<p>4. 開發一個工具</p>
<p>5. 課程總結</p>
<p style="padding-left: 30px;">錄製一段簡報影片</p>
<h2>計算機程式能力</h2>
<p>ChatGPT 認為"機械設計工程師必須具備的計算機程式能力":</p>
<p>機械設計工程師在現代工程領域中，計算機程式的能力已變得相當關鍵。這些能力可以幫助工程師更有效地進行設計、分析、模擬和最佳化工作。</p>
<p>以下是機械設計工程師需要具備的計算機程式能力：</p>
<p>1. 電腦輔助設計（CAD, Computer Aided Design）軟體與模型編輯器： 機械設計師通常需要運用電腦輔助設計（CAD）軟體，如SolidWorks、AutoCAD、Inventor、Solid Edge、Creo、NX、CATIA、Onshape 等，來建立和編輯三維模型。對這些軟體的熟悉能夠協助有效進行產品設計和模型製作。</p>
<p>2. 程式語言： 至少要了解一種通用的程式語言（如 Python、MATLAB 等），這能夠協助工程師進行數據分析、自動化任務、模擬和最佳化工作。Python 在科學計算和工程領域廣泛使用，具有豐富的程式庫和工具。</p>
<p>3. 有限元素分析（FEA, Finite Element Analysis）軟體： 了解如何使用有限元素分析軟體（如 ANSYS、ABAQUS、Comsol 等）進行結構分析和模擬，以確保產品的安全性和可靠性。</p>
<p>4. 數值模擬和建模： 能夠運用數值模擬工具進行流體力學、熱傳、動力學等模擬分析，以改進產品設計。</p>
<p>5. 數據處理和分析： 能夠運用程式語言或數據處理工具進行實驗數據的處理、分析和視覺化，以支援設計決策。</p>
<p>6. 自動化程式： 運用程式方法自動執行重複性任務，節省時間並提高效率。</p>
<p>7. 控制系統： 如果涉及機械系統的控制，了解控制系統的基本概念和使用工具，例如: MATLAB/Simulink，能夠幫助設計工程師進行系統最佳化和調試。</p>
<p>8. 創建自訂工具和外掛程式： 根據需要，開發自訂工具、延伸程式，以擴充現有軟體的功能，更好地適應特定的設計流程。</p>
<p>總括而言，機械設計工程師需要具備基本的計算機程式能力，以支援設計和分析工作。這些能力能夠提高工程師的效率、彈性和創新能力，使其能夠應對複雜的設計挑戰並提供出色的解決方案。</p>
<h3>Python 內容</h3>
<p>以 Python 程式語言為例, 作為一個機械設計工程師需要了解那些內容:</p>
<p>作為一名機械設計工程師，了解 Python 程式語言可以幫助你在設計、分析和模擬方面更有效地工作。以下是你應該了解的一些 Python 相關內容：</p>
<p>1. 基本語法和語法結構： 理解 Python 的基本語法、變數、資料型別、運算符等是入門的第一步。</p>
<p>2. 流程控制： 知道如何使用條件語句（if、else）和迴圈（for、while）來控制程式的執行流程。</p>
<p>3. 函式和模組： 學習如何定義和使用函式，以及如何將程式碼模組化、組織成不同的檔案。</p>
<p>4. 列表 (list)、字典 (dictionary)、集合 (set)等資料結構： 了解這些資料結構可以幫助你更有效地管理和操作資料。</p>
<p>5. 檔案操作： 學會讀寫檔案，這在處理實驗數據、設定檔案等方面很有用。</p>
<p>6. 數值計算和科學計算程式庫： 學習使用 NumPy 和 SciPy 等程式庫，這些程式庫提供了豐富的數值計算和科學計算功能。</p>
<p>7. 資料視覺化： 了解如何使用 Matplotlib 或其他資料視覺化工具來創建圖表和圖形，以更好地理解和呈現數據。</p>
<p>8. 程式碼最佳化和效能提升： 學習如何編寫高效率的程式碼，避免不必要的迴圈和資源浪費。</p>
<p>9. 與外部工具的互動： 了解如何使用 subprocess 或其他模組來執行外部程式或工具。</p>
<p>10. 數據分析和機器學習： 進一步學習 Pandas 和 Scikit-Learn，這些庫可以幫助你進行數據處理、分析和機器學習任務。</p>
<p>11. 自動化任務： 使用 Python 的自動化能力來執行重複性任務，如檔案批處理、數據擷取等。</p>
<p>12. 3D 模型處理和可視化： 學習使用相關程式庫（如 Matplotlib 3D、Mayavi 等）來處理和視覺化 3D 模型數據。</p>
<p>總之，Python 是一個強大且廣泛應用的程式語言，對機械設計工程師來說具有重要意義。通過掌握這些基本內容，你可以更好地在機械設計領域中應用 Python，提高工作效率並處理各種挑戰。</p>
<h3>Python 基本語法</h3>
<p><span>請針對"基本語法和語法結構： 理解 Python 的基本語法、變數、資料型別、運算符等是入門的第一步" 做更深入的內容說明, 並分別舉例以及逐行註解說明用法。</span></p>
<p>當我們說到「基本語法和語法結構」時，我們指的是 Python 程式語言的基本組成部分，這些知識對於了解如何編寫和閱讀 Python 程式至關重要。以下是幾個方面的深入說明，以及相應的例子和逐行註解說明：</p>
<h4>變數和資料型別</h4>
<p>在 Python 中，你可以使用變數來存儲資料。資料型別指的是變數可以包含的不同類型的資料，例如數字、文字等。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#python
# 這是一個整數變數
age = 25

# 這是一個浮點數變數
height = 175.5

# 這是一個字串變數
name = "John"

# 這是一個布林值變數
is_student = True</pre>
<h4>運算符</h4>
<p>運算符用於進行數學和邏輯運算，例如加法、減法、比較等。</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#python
a = 10
b = 5

# 加法
sum_result = a + b

# 減法
difference = a - b

# 乘法
product = a * b

# 除法
quotient = a / b

# 比較運算符
is_greater = a &gt; b
is_equal = a == b
</pre>
<h4><br/>條件語句（if、else）</h4>
<p>條件語句用於根據條件的真假執行不同的程式碼。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#python
temperature = 28

if temperature &gt; 30:
print("It's a hot day!")
elif temperature &gt; 20:
print("It's a pleasant day.")
else:
print("It's a bit chilly.")
</pre>
<p></p>
<h4>迴圈（for、while）</h4>
<p>迴圈用於重複執行一段程式碼，直到特定條件不滿足為止。</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#python
# for 迴圈
for i in range(5):
print(i)

# while 迴圈
counter = 0
while counter &lt; 3:
print("Counter:", counter)
counter += 1
</pre>
<p></p>
<p>這些是 Python 基本語法和語法結構的一些示例。逐行註解說明表明了每行程式碼的作用和功能。理解這些基本概念將幫助你建立穩固的 Python 基礎，為進一步的學習和應用鋪路。</p>
<p></p><h1>mind-map</h1>
<p>研究 <a href="https://github.com/wanglin2/mind-map">https://github.com/wanglin2/mind-map</a> </p>
<p>Vue and Javascript </p>
<p><a href="https://vuejs.org/">https://vuejs.org/</a> </p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3781-6">2018 Getting to Know Vue.js</a></p>
<p>Other References:</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3805-9">2018 Pro Vue.js 2</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5334-2">2020 Building Progressive Web Applications with Vue.js</a></p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-3-658-37596-6">2022 Building web applications with Vue.js</a></p><h1>cp</h1>
<p>Donald Knuth: Programming, Algorithms, Hard Problems &amp; the Game of Life </p>
<p><a href="https://youtu.be/EE1R8FYUJm0">https://youtu.be/EE1R8FYUJm0</a> </p>
<p></p><h2>Email</h2>
<p>Email: 學號@nfu.edu.tw</p>
<p style="padding-left: 30px;"><a href="https://mail.nfu.edu.tw">https://mail.nfu.edu.tw</a></p>
<h3>E_why</h3>
<p>為何需要</p>
<p>學號@nfu.edu.tw</p>
<h3>E_how</h3>
<p>如何使用</p>
<p>學號@nfu.edu.tw</p>
<p>轉信至 Gmail - how, why, what problem may arise</p>
<h3>E_what</h3>
<p>甚麼是</p>
<p>學號@nfu.edu.tw</p>
<p>What problem may arise?</p>
<h3>E_when</h3>
<p>何時可(該)使用</p>
<p>學號@nfu.edu.tw</p>
<h3>E_who</h3>
<h3>E_where</h3>
<h2>Onedrive</h2>
<h3>O_why</h3>
<h3>O_how</h3>
<h3>O_what</h3>
<h3>O_when</h3>
<h3>O_who</h3>
<h3>O_where</h3>
<h2>Github</h2>
<h3>G_why</h3>
<h3>G_how</h3>
<h3>G_what</h3>
<h3>G_when</h3>
<h3>G_who</h3>
<h3>G_where</h3>
<h2>Replit</h2>
<h3>R_why</h3>
<h3>R_how</h3>
<h3>R_what</h3>
<h3>R_when</h3>
<h3>R_who</h3>
<h3>R_where</h3>
<h2>Python</h2>
<h3>P_why</h3>
<h3>P_how</h3>
<h3>P_what</h3>
<h3>P_when</h3>
<h3>P_who</h3>
<h3>P_where</h3>
<h2>Javascript</h2>
<h3>J_why</h3>
<h3>J_how</h3>
<h3>J_what</h3>
<h3>J_when</h3>
<h3>J_who</h3>
<h3>J_where</h3>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>